local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Lighting = game:GetService("Lighting")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local StarterPlayer = game:GetService("StarterPlayer")
local VirtualUser = game:GetService("VirtualUser")
local TweenService = game:GetService("TweenService")
local LP = Players.LocalPlayer

-- ========= ENHANCED UTILS =========
local function alive(i)
    if not i then return false end
    local ok = pcall(function() return i.Parent end)
    return ok and i.Parent ~= nil
end

local function validPart(p) return p and alive(p) and p:IsA("BasePart") end
local function clamp(n,lo,hi) if n<lo then return lo elseif n>hi then return hi else return n end end
local function now() return os.clock() end
local function dist(a,b) return (a-b).Magnitude end

local function lerp(a, b, t) return a + (b - a) * t end
local function smoothStep(t) return t * t * (3 - 2 * t) end

local function firstBasePart(inst)
    if not alive(inst) then return nil end
    if inst:IsA("BasePart") then return inst end
    if inst:IsA("Model") then
        if inst.PrimaryPart and inst.PrimaryPart:IsA("BasePart") and alive(inst.PrimaryPart) then return inst.PrimaryPart end
        local p = inst:FindFirstChildWhichIsA("BasePart", true)
        if validPart(p) then return p end
    end
    if inst:IsA("Tool") then
        local h = inst:FindFirstChild("Handle") or inst:FindFirstChildWhichIsA("BasePart")
        if validPart(h) then return h end
    end
    return nil
end

-- ========= ENHANCED UI ELEMENTS =========
local function makeBillboard(text, color3, distance)
    local g = Instance.new("BillboardGui")
    g.Name = "VD_Tag"
    g.AlwaysOnTop = true
    g.Size = UDim2.new(0, 200, 0, 36)
    g.StudsOffset = Vector3.new(0, 3, 0)
    g.MaxDistance = distance or 500
    
    local l = Instance.new("TextLabel")
    l.Name = "Label"
    l.BackgroundTransparency = 1
    l.Size = UDim2.new(1, 0, 1, 0)
    l.Font = Enum.Font.GothamBold
    l.Text = text
    l.TextSize = 14
    l.TextColor3 = color3 or Color3.new(1,1,1)
    l.TextStrokeTransparency = 0
    l.TextStrokeColor3 = Color3.new(0,0,0)
    l.Parent = g
    
    local dist = Instance.new("TextLabel")
    dist.Name = "Distance"
    dist.BackgroundTransparency = 1
    dist.Size = UDim2.new(1, 0, 0.4, 0)
    dist.Position = UDim2.new(0, 0, 1, 0)
    dist.Font = Enum.Font.Gotham
    dist.TextSize = 12
    dist.TextColor3 = Color3.new(1,1,1)
    dist.TextStrokeTransparency = 0
    dist.Parent = g
    
    return g
end

local function ensureBoxESP(part, name, color)
    if not validPart(part) then return end
    local a = part:FindFirstChild(name)
    if not a then
        local ok, obj = pcall(function()
            local b = Instance.new("BoxHandleAdornment")
            b.Name = name
            b.Adornee = part
            b.ZIndex = 10
            b.AlwaysOnTop = true
            b.Transparency = 0.5
            b.Size = part.Size + Vector3.new(0.2,0.2,0.2)
            b.Color3 = color
            b.Parent = part
            return b
        end)
        if ok then a = obj end
    else
        a.Color3 = color
        a.Size = part.Size + Vector3.new(0.2,0.2,0.2)
    end
end

local function clearChild(o, n)
    if o and alive(o) then
        local c = o:FindFirstChild(n)
        if c then pcall(function() c:Destroy() end) end
    end
end

local function ensureHighlight(model, fill, outline)
    if not (model and model:IsA("Model") and alive(model)) then return end
    local hl = model:FindFirstChild("VD_HL")
    if not hl then
        local ok, obj = pcall(function()
            local h = Instance.new("Highlight")
            h.Name = "VD_HL"
            h.Adornee = model
            h.FillTransparency = 0.5
            h.OutlineTransparency = 0
            h.Parent = model
            return h
        end)
        if ok then hl = obj else return end
    end
    hl.FillColor = fill
    hl.OutlineColor = outline or fill
    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
end

local function clearHighlight(model)
    if model and model:FindFirstChild("VD_HL") then
        pcall(function() model.VD_HL:Destroy() end)
    end
end

-- ========= ADVANCED TRACERS =========
local tracersEnabled = false
local tracerAttachments = {}

local function createTracer(from, to, color)
    local att0 = Instance.new("Attachment")
    att0.WorldPosition = from
    att0.Parent = Workspace.Terrain
    
    local att1 = Instance.new("Attachment")
    att1.WorldPosition = to
    att1.Parent = Workspace.Terrain
    
    local beam = Instance.new("Beam")
    beam.Attachment0 = att0
    beam.Attachment1 = att1
    beam.Color = ColorSequence.new(color)
    beam.Width0 = 0.1
    beam.Width1 = 0.1
    beam.FaceCamera = true
    beam.Transparency = NumberSequence.new(0.5)
    beam.Parent = Workspace.Terrain
    
    return {att0, att1, beam}
end

local function updateTracers()
    for _, objs in pairs(tracerAttachments) do
        for _, obj in ipairs(objs) do
            if obj then pcall(function() obj:Destroy() end) end
        end
    end
    tracerAttachments = {}
    
    if not tracersEnabled then return end
    
    local cam = Workspace.CurrentCamera
    if not cam then return end
    local from = cam.CFrame.Position
    
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= LP and pl.Character then
            local hrp = pl.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                local role = getRole(pl)
                local color = role == "Killer" and currentKillerColor() or survivorColor
                tracerAttachments[pl] = createTracer(from, hrp.Position, color)
            end
        end
    end
end

-- ========= ENHANCED UI =========
local Window = Rayfield:CreateWindow({
    Name="Violence District Enhanced v2.0",
    LoadingTitle="Violence District Suite",
    LoadingSubtitle="by jlcfg - Enhanced Edition",
    ConfigurationSaving={Enabled=true,FolderName="VD_Suite_v2",FileName="vd_config_v2"},
    KeySystem=false
})

local TabPlayer = Window:CreateTab("Player")
local TabESP = Window:CreateTab("ESP")
local TabWorld = Window:CreateTab("World")
local TabVisual = Window:CreateTab("Visual")
local TabAuto = Window:CreateTab("Automation")
local TabMisc = Window:CreateTab("Misc")

-- ========= KILLER DETECTION =========
local function getRole(p)
    local tn = p.Team and p.Team.Name and p.Team.Name:lower() or ""
    if tn:find("killer") then return "Killer" end
    if tn:find("survivor") then return "Survivor" end
    return "Survivor"
end

local killerTypeName = "Killer"
local killerColors = {
    Jason = Color3.fromRGB(255, 60, 60),
    Stalker = Color3.fromRGB(255, 120, 60),
    Masked = Color3.fromRGB(255, 160, 60),
    Hidden = Color3.fromRGB(255, 60, 160),
    Abysswalker = Color3.fromRGB(120, 60, 255),
    Killer = Color3.fromRGB(255, 0, 0),
}

local function currentKillerColor()
    return killerColors[killerTypeName] or killerColors.Killer
end

local knownKillers = {Jason=true, Stalker=true, Masked=true, Hidden=true, Abysswalker=true}
do
    local r = ReplicatedStorage:FindFirstChild("Remotes")
    if r then
        local k = r:FindFirstChild("Killers")
        if k then
            for _,ch in ipairs(k:GetChildren()) do
                if ch:IsA("Folder") then knownKillers[ch.Name] = true end
            end
        end
    end
end

local function refreshKillerESPLabels()
    for _,pl in ipairs(Players:GetPlayers()) do
        if pl ~= LP and getRole(pl)=="Killer" then
            if pl.Character then
                local head = pl.Character:FindFirstChild("Head")
                if head then
                    local tag = head:FindFirstChild("VD_Tag")
                    if tag then
                        local l = tag:FindFirstChild("Label")
                        if l then l.Text = pl.Name.." ["..tostring(killerTypeName).."]" end
                    end
                end
            end
        end
    end
end

local function setKillerType(name)
    if name and knownKillers[name] and killerTypeName ~= name then
        killerTypeName = name
        refreshKillerESPLabels()
    end
end

-- ========= ENHANCED PLAYER ESP WITH DISTANCE =========
local survivorColor = Color3.fromRGB(0,255,0)
local killerBaseColor = killerColors.Killer
local nametagsEnabled, playerESPEnabled, showDistance = false, false, false
local playerConns = {}

local function applyPlayerESP(p)
    if p == LP then return end
    local c = p.Character
    if not (c and alive(c)) then return end
    local col = (getRole(p)=="Killer") and currentKillerColor() or survivorColor

    if playerESPEnabled then
        if c:IsDescendantOf(Workspace) then ensureHighlight(c, col, col) end
        local head = c:FindFirstChild("Head")
        if nametagsEnabled and validPart(head) then
            local tag = head:FindFirstChild("VD_Tag") or makeBillboard(p.Name, col)
            tag.Name = "VD_Tag"
            tag.Parent = head
            local l = tag:FindFirstChild("Label")
            if l then
                if getRole(p)=="Killer" then 
                    l.Text = p.Name.." ["..tostring(killerTypeName).."]" 
                else 
                    l.Text = p.Name 
                end
                l.TextColor3 = col
            end
            
            if showDistance then
                local distLabel = tag:FindFirstChild("Distance")
                if distLabel and LP.Character then
                    local myHRP = LP.Character:FindFirstChild("HumanoidRootPart")
                    local theirHRP = c:FindFirstChild("HumanoidRootPart")
                    if myHRP and theirHRP then
                        local d = math.floor(dist(myHRP.Position, theirHRP.Position))
                        distLabel.Text = tostring(d).." studs"
                    end
                end
            end
        else
            local t = head and head:FindFirstChild("VD_Tag")
            if t then pcall(function() t:Destroy() end) end
        end
    else
        clearHighlight(c)
        local head = c:FindFirstChild("Head")
        local t = head and head:FindFirstChild("VD_Tag")
        if t then pcall(function() t:Destroy() end) end
    end
end

local function watchPlayer(p)
    if playerConns[p] then for _,cn in ipairs(playerConns[p]) do cn:Disconnect() end end
    playerConns[p] = {}
    table.insert(playerConns[p], p.CharacterAdded:Connect(function()
        task.delay(0.15, function() applyPlayerESP(p) end)
    end))
    table.insert(playerConns[p], p:GetPropertyChangedSignal("Team"):Connect(function() applyPlayerESP(p) end))
    if p.Character then applyPlayerESP(p) end
end

local function unwatchPlayer(p)
    if p.Character then
        clearHighlight(p.Character)
        local head = p.Character:FindFirstChild("Head")
        if head and head:FindFirstChild("VD_Tag") then pcall(function() head.VD_Tag:Destroy() end) end
    end
    if playerConns[p] then for _,cn in ipairs(playerConns[p]) do cn:Disconnect() end end
    playerConns[p] = nil
end

-- Distance update loop
task.spawn(function()
    while true do
        if showDistance and playerESPEnabled then
            for _,pl in ipairs(Players:GetPlayers()) do
                if pl ~= LP then applyPlayerESP(pl) end
            end
        end
        task.wait(0.5)
    end
end)

TabESP:CreateSection("Players")
TabESP:CreateToggle({
    Name="Player ESP (Chams)",
    CurrentValue=false,
    Flag="PlayerESP",
    Callback=function(s) 
        playerESPEnabled=s 
        for _,pl in ipairs(Players:GetPlayers()) do 
            if pl~=LP then applyPlayerESP(pl) end 
        end 
    end
})

TabESP:CreateToggle({
    Name="Nametags",
    CurrentValue=false,
    Flag="Nametags",
    Callback=function(s) 
        nametagsEnabled=s 
        for _,pl in ipairs(Players:GetPlayers()) do 
            if pl~=LP then applyPlayerESP(pl) end 
        end 
    end
})

TabESP:CreateToggle({
    Name="Show Distance",
    CurrentValue=false,
    Flag="ShowDistance",
    Callback=function(s) 
        showDistance=s 
    end
})

TabESP:CreateToggle({
    Name="Tracers",
    CurrentValue=false,
    Flag="Tracers",
    Callback=function(s) 
        tracersEnabled=s 
        if s then
            task.spawn(function()
                while tracersEnabled do
                    updateTracers()
                    task.wait(0.5)
                end
                updateTracers()
            end)
        end
    end
})

TabESP:CreateColorPicker({
    Name="Survivor Color",
    Color=survivorColor,
    Flag="SurvivorCol",
    Callback=function(c) 
        survivorColor=c 
        for _,pl in ipairs(Players:GetPlayers()) do 
            if pl~=LP then applyPlayerESP(pl) end 
        end 
    end
})

TabESP:CreateColorPicker({
    Name="Killer Color",
    Color=killerBaseColor,
    Flag="KillerCol",
    Callback=function(c) 
        killerBaseColor=c 
        killerColors.Killer=c 
        for _,pl in ipairs(Players:GetPlayers()) do 
            if pl~=LP then applyPlayerESP(pl) end 
        end 
    end
})

for _,p in ipairs(Players:GetPlayers()) do if p~=LP then watchPlayer(p) end end
Players.PlayerAdded:Connect(watchPlayer)
Players.PlayerRemoving:Connect(unwatchPlayer)

-- ========= WORLD ESP =========
local worldColors = {
    Generator = Color3.fromRGB(0,170,255),
    Hook = Color3.fromRGB(255,0,0),
    Gate = Color3.fromRGB(255,225,0),
    Window = Color3.fromRGB(255,255,255),
    Palletwrong = Color3.fromRGB(255,140,0)
}
local worldEnabled = {Generator=false,Hook=false,Gate=false,Window=false,Palletwrong=false}
local validCats = {Generator=true,Hook=true,Gate=true,Window=true,Palletwrong=true}
local worldReg = {Generator={},Hook={},Gate={},Window={},Palletwrong={}}
local mapAdd, mapRem = {}, {}
local showWorldDistance = false

local palletState = setmetatable({}, {__mode="k"})
local windowState = setmetatable({}, {__mode="k"})

local function labelForPallet(model)
    local st=palletState[model] or "UP"
    if st=="DOWN" then return "Pallet (down)" end
    if st=="DEST" then return "Pallet (destroyed)" end
    if st=="SLIDE" then return "Pallet (slide)" end
    return "Pallet"
end

local function labelForWindow(model)
    local st=windowState[model] or "READY"
    return st=="BUSY" and "Window (busy)" or "Window"
end

local function pickRep(model, cat)
    if not (model and alive(model)) then return nil end
    if cat == "Generator" then
        local hb = model:FindFirstChild("HitBox", true)
        if validPart(hb) then return hb end
    elseif cat == "Palletwrong" then
        local a = model:FindFirstChild("HumanoidRootPart", true); if validPart(a) then return a end
        local b = model:FindFirstChild("PrimaryPartPallet", true); if validPart(b) then return b end
        local c = model:FindFirstChild("Primary1", true); if validPart(c) then return c end
        local d = model:FindFirstChild("Primary2", true); if validPart(d) then return d end
    end
    return firstBasePart(model)
end

local function genLabelData(model, includeDistance)
    local pct = tonumber(model:GetAttribute("RepairProgress")) or 0
    if pct>=0 and pct<=1.001 then pct = pct*100 end
    pct = clamp(pct,0,100)
    local repairers = tonumber(model:GetAttribute("PlayersRepairingCount")) or 0
    local paused = (model:GetAttribute("ProgressPaused")==true)
    local kickcount = tonumber(model:GetAttribute("kickcount")) or 0
    local abyss50 = (model:GetAttribute("Abyss50Triggered")==true)
    
    local parts = {"Gen "..tostring(math.floor(pct+0.5)).."%" }
    if repairers>0 then parts[#parts+1]="("..repairers.."p)" end
    if paused then parts[#parts+1]="⏸" end
    if abyss50 then parts[#parts+1]="⚠" end
    if kickcount and kickcount>0 then parts[#parts+1]="K:"..kickcount end
    
    if includeDistance and LP.Character then
        local myHRP = LP.Character:FindFirstChild("HumanoidRootPart")
        local rep = pickRep(model, "Generator")
        if myHRP and rep then
            local d = math.floor(dist(myHRP.Position, rep.Position))
            parts[#parts+1] = d.."m"
        end
    end
    
    local text = table.concat(parts," ")
    local hue = clamp((pct/100)*0.33,0,0.33)
    local labelColor = Color3.fromHSV(hue,1,1)
    return text, labelColor
end

local function hasAnyBasePart(m)
    if not (m and alive(m)) then return false end
    local bp = m:FindFirstChildWhichIsA("BasePart", true)
    return bp ~= nil
end

local function isPalletGone(m)
    if not alive(m) then return true end
    if not m:IsDescendantOf(Workspace) then return true end
    if palletState[m]=="DEST" then return true end
    local ok, val = pcall(function() return m:GetAttribute("Destroyed") end)
    if ok and val == true then return true end
    if not hasAnyBasePart(m) then return true end
    return false
end

local function ensureWorldEntry(cat, model)
    if not alive(model) or worldReg[cat][model] then return end
    if cat=="Palletwrong" and isPalletGone(model) then return end
    local rep = pickRep(model, cat)
    if not validPart(rep) then return end
    worldReg[cat][model] = {part = rep}
end

local function removeWorldEntry(cat, model)
    local e = worldReg[cat][model]
    if not e then return end
    clearChild(e.part, "VD_"..cat)
    clearChild(e.part, "VD_Text_"..cat)
    worldReg[cat][model] = nil
end

local function registerFromDescendant(obj)
    if not alive(obj) then return end
    if obj:IsA("Model") and validCats[obj.Name] then
        ensureWorldEntry(obj.Name, obj)
        return
    end
    if obj:IsA("BasePart") and obj.Parent and obj.Parent:IsA("Model") and validCats[obj.Parent.Name] then
        ensureWorldEntry(obj.Parent.Name, obj.Parent)
    end
end

local function unregisterFromDescendant(obj)
    if not obj then return end
    if obj:IsA("Model") and validCats[obj.Name] then
        removeWorldEntry(obj.Name, obj)
        return
    end
    if obj:IsA("BasePart") and obj.Parent and obj.Parent:IsA("Model") and validCats[obj.Parent.Name] then
        local e = worldReg[obj.Parent.Name][obj.Parent]
        if e and e.part == obj then removeWorldEntry(obj.Parent.Name, obj.Parent) end
    end
end

local function attachRoot(root)
    if not root or mapAdd[root] then return end
    mapAdd[root] = root.DescendantAdded:Connect(registerFromDescendant)
    mapRem[root] = root.DescendantRemoving:Connect(unregisterFromDescendant)
    for _,d in ipairs(root:GetDescendants()) do registerFromDescendant(d) end
end

local function refreshRoots()
    for _,cn in pairs(mapAdd) do if cn then cn:Disconnect() end end
    for _,cn in pairs(mapRem) do if cn then cn:Disconnect() end end
    mapAdd, mapRem = {}, {}
    local r1 = Workspace:FindFirstChild("Map")
    local r2 = Workspace:FindFirstChild("Map1")
    if r1 then attachRoot(r1) end
    if r2 then attachRoot(r2) end
end

refreshRoots()
Workspace.ChildAdded:Connect(function(ch) if ch.Name=="Map" or ch.Name=="Map1" then attachRoot(ch) end end)

local worldLoopThread=nil
local function anyWorldEnabled() for _,v in pairs(worldEnabled) do if v then return true end end return false end

local function startWorldLoop()
    if worldLoopThread then return end
    worldLoopThread = task.spawn(function()
        while anyWorldEnabled() do
            for cat,models in pairs(worldReg) do
                if worldEnabled[cat] then
                    local col, tagName, textName = worldColors[cat], "VD_"..cat, "VD_Text_"..cat
                    local n = 0
                    for model,entry in pairs(models) do
                        if cat=="Palletwrong" and isPalletGone(model) then
                            removeWorldEntry(cat, model)
                        else
                            local part = entry.part
                            if model and alive(model) then
                                if not validPart(part) or (model:IsA("Model") and not part:IsDescendantOf(model)) then
                                    entry.part = pickRep(model, cat); part = entry.part
                                end
                                if validPart(part) then
                                    ensureBoxESP(part, tagName, col)
                                    local bb = part:FindFirstChild(textName)
                                    if not bb then
                                        local newbb = makeBillboard((cat=="Palletwrong" and "Pallet") or cat, col, 1000)
                                        newbb.Name = textName
                                        newbb.Parent = part
                                        bb = newbb
                                    end
                                    local lbl = bb:FindFirstChild("Label")
                                    if lbl then
                                        if cat=="Generator" then 
                                            local txt,lblCol=genLabelData(model, showWorldDistance) 
                                            lbl.Text=txt 
                                            lbl.TextColor3=lblCol
                                        elseif cat=="Palletwrong" then 
                                            lbl.Text=labelForPallet(model) 
                                            lbl.TextColor3=col
                                        elseif cat=="Window" then 
                                            lbl.Text=labelForWindow(model) 
                                            lbl.TextColor3=col
                                        else 
                                            lbl.Text=cat 
                                            lbl.TextColor3=col 
                                        end
                                    end
                                end
                            else
                                removeWorldEntry(cat, model)
                            end
                        end
                        n = n + 1
                        if n % 60 == 0 then task.wait() end
                    end
                end
            end
            task.wait(0.25)
        end
        worldLoopThread=nil
    end)
end

local function setWorldToggle(cat, state)
    worldEnabled[cat] = state
    if state then
        if not worldLoopThread then startWorldLoop() end
    else
        for _,entry in pairs(worldReg[cat]) do
            if entry and entry.part then
                clearChild(entry.part,"VD_"..cat)
                clearChild(entry.part,"VD_Text_"..cat)
            end
        end
    end
end

TabWorld:CreateSection("Toggles")
TabWorld:CreateToggle({Name="Generators",CurrentValue=false,Flag="Gen",Callback=function(s) setWorldToggle("Generator", s) end})
TabWorld:CreateToggle({Name="Hooks",CurrentValue=false,Flag="Hook",Callback=function(s) setWorldToggle("Hook", s) end})
TabWorld:CreateToggle({Name="Gates",CurrentValue=false,Flag="Gate",Callback=function(s) setWorldToggle("Gate", s) end})
TabWorld:CreateToggle({Name="Windows",CurrentValue=false,Flag="Window",Callback=function(s) setWorldToggle("Window", s) end})
TabWorld:CreateToggle({Name="Pallets",CurrentValue=false,Flag="Pallet",Callback=function(s) setWorldToggle("Palletwrong", s) end})
TabWorld:CreateToggle({Name="Show Distance",CurrentValue=false,Flag="WorldDist",Callback=function(s) showWorldDistance=s end})

TabWorld:CreateSection("Colors")
TabWorld:CreateColorPicker({Name="Generators",Color=worldColors.Generator,Flag="GenCol",Callback=function(c) worldColors.Generator=c end})
TabWorld:CreateColorPicker({Name="Hooks",Color=worldColors.Hook,Flag="HookCol",Callback=function(c) worldColors.Hook=c end})
TabWorld:CreateColorPicker({Name="Gates",Color=worldColors.Gate,Flag="GateCol",Callback=function(c) worldColors.Gate=c end})
TabWorld:CreateColorPicker({Name="Windows",Color=worldColors.Window,Flag="WinCol",Callback=function(c) worldColors.Window=c end})
TabWorld:CreateColorPicker({Name="Pallets",Color=worldColors.Palletwrong,Flag="PalCol",Callback=function(c) worldColors.Palletwrong=c end})

-- ========= SMOOTH TELEPORT =========
local function smoothTeleport(targetCFrame, duration)
    local char = LP.Character
    if not (char and char.Parent) then return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end
    
    local startCFrame = hrp.CFrame
    local elapsed = 0
    
    local conn
    conn = RunService.Heartbeat:Connect(function(dt)
        elapsed = elapsed + dt
        local alpha = math.min(elapsed / duration, 1)
        alpha = smoothStep(alpha)
        
        hrp.CFrame = startCFrame:Lerp(targetCFrame, alpha)
        
        if alpha >= 1 then
            conn:Disconnect()
        end
    end)
end

-- ========= ENHANCED MOVEMENT =========
local speedCurrent, speedHumanoid = 16, nil
local speedEnforced, speedPaused = false, false
local speedStunUntil, speedSlowUntil = 0, 0
local speedTickConn, wsConn, stConn, pfConn, anConn = nil, nil, nil, nil, nil
local speedLastTick, speedTickInterval = 0, 0.12
local serverBaseline = nil
local flyEnabled = false
local flySpeed = 50
local flyConn = nil

local function canonicalDefault()
    local ok,val = pcall(function() return StarterPlayer.CharacterWalkSpeed end)
    if ok and typeof(val)=="number" and val>0 then
