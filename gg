-- Debug + Robust Indo Hangout Auto Fishing v2 (Debug Mode)
-- Paste ini di Delta executor, lihat Output/Console untuk print()

local function safeGet(url)
    local ok, res = pcall(function()
        return game:HttpGet(url, true)
    end)
    return ok and res or nil, ok and nil or res
end

-- Try load Orion safely
local OrionLib = nil
do
    local url = "https://raw.githubusercontent.com/shlexware/Orion/main/source"
    local body, err = safeGet(url)
    if body then
        local ok, lib = pcall(function() return loadstring(body)() end)
        if ok and lib then
            OrionLib = lib
            print("[DEBUG] OrionLib loaded.")
        else
            print("[DEBUG] Orion loadstring failed:", lib or "unknown")
        end
    else
        print("[DEBUG] Cannot HttpGet Orion:", err)
    end
end

-- Settings
getgenv().AutoMancing = false
getgenv().Delay = 1
getgenv().SelectedRemote = nil

-- Anti-AFK (safe)
pcall(function()
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        vu:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    end)
    print("[DEBUG] Anti-AFK connected.")
end)

-- Function: search likely RemoteEvents in ReplicatedStorage
local function findFishingRemotes()
    local candidates = {}
    local rs = game:GetService("ReplicatedStorage")
    
    -- Cari di berbagai lokasi yang mungkin
    local locations = {
        rs,
        game:GetService("Workspace"),
        game:GetService("ReplicatedFirst"),
        game:GetService("ServerScriptService"),
        game:GetService("ServerStorage"),
        game:GetService("StarterPack"),
        game:GetService("StarterPlayer"):FindFirstChild("StarterPlayerScripts"),
        game:GetService("StarterGui")
    }
    
    for _, location in ipairs(locations) do
        pcall(function()
            for _, v in ipairs(location:GetDescendants()) do
                if v:IsA("RemoteEvent") or v:IsA("RemoteFunction") then
                    local name = tostring(v.Name):lower()
                    if name:find("fish") or name:find("fishing") or name:find("rod") or 
                       name:find("cast") or name:find("reel") or name:find("catch") or
                       name:find("mancing") or name:find("ikan") or name:find("tangkap") then
                        table.insert(candidates, v)
                    end
                end
            end
        end)
    end
    
    -- Jika tidak ada yang spesifik, ambil semua remote yang umum
    if #candidates == 0 then
        pcall(function()
            for _, v in ipairs(rs:GetDescendants()) do
                if v:IsA("RemoteEvent") then
                    table.insert(candidates, v)
                end
            end
        end)
    end
    
    return candidates
end

-- Function untuk test remote
local function testRemote(remote)
    print("[DEBUG] Testing remote:", remote:GetFullName())
    
    local testArgs = {
        "Cast", "Reel", "Fish", "Fishing", "Start", "Stop",
        "Mancing", "Ikan", "Tangkap",
        true, false, 1, 0
    }
    
    for _, arg in ipairs(testArgs) do
        local success, result = pcall(function()
            if remote:IsA("RemoteEvent") then
                remote:FireServer(arg)
            else
                remote:InvokeServer(arg)
            end
        end)
        
        if success then
            print("[DEBUG] Success with arg:", arg)
            return true
        else
            print("[DEBUG] Failed with arg:", arg, "- Error:", result)
        end
    end
    
    return false
end

-- Deteksi remote
local detected = findFishingRemotes()
print("[DEBUG] Found", #detected, "potential remotes")

if #detected == 0 then
    print("[DEBUG] Tidak menemukan RemoteEvent yang jelas untuk fishing.")
    print("[DEBUG] Daftar semua RemoteEvent/RemoteFunction di game:")
    
    local allRemotes = {}
    local locations = {
        game:GetService("ReplicatedStorage"),
        game:GetService("Workspace"),
        game:GetService("ServerScriptService")
    }
    
    for _, location in ipairs(locations) do
        pcall(function()
            for _, v in ipairs(location:GetDescendants()) do
                if v:IsA("RemoteEvent") or v:IsA("RemoteFunction") then
                    table.insert(allRemotes, v)
                    print(" -", v:GetFullName(), "("..v.ClassName..")")
                end
            end
        end)
    end
    
    detected = allRemotes
else
    print("[DEBUG] RemoteEvent kandidat ditemukan:")
    for i, r in ipairs(detected) do
        print(i..")", r:GetFullName(), "("..r.ClassName..")")
    end
end

-- Create GUI
local Window = nil
local Toggle = nil
local Dropdown = nil

if OrionLib then
    Window = OrionLib:MakeWindow({
        Name = "Indo Hangout | Auto Mancing (Debug)", 
        HidePremium = false, 
        SaveConfig = true, 
        ConfigFolder = "IndoHangoutFishing"
    })
    
    local main = Window:MakeTab({Name = "Main"})
    
    main:AddParagraph("Status", "Debug Mode: lihat Output/Console untuk detail.")
    
    -- Dropdown untuk pilih remote
    local remoteNames = {}
    for i, remote in ipairs(detected) do
        table.insert(remoteNames, i..". "..remote:GetFullName().." ("..remote.ClassName..")")
    end
    
    if #remoteNames == 0 then
        table.insert(remoteNames, "No remotes found")
    end
    
    Dropdown = main:AddDropdown({
        Name = "Pilih Remote Event",
        Default = "1",
        Options = remoteNames,
        Callback = function(selected)
            local index = tonumber(string.match(selected, "^(%d+)"))
            if index and detected[index] then
                getgenv().SelectedRemote = detected[index]
                print("[DEBUG] Selected remote:", getgenv().SelectedRemote:GetFullName())
                
                -- Test remote yang dipilih
                main:AddParagraph("Remote Test", "Testing selected remote...")
                local testResult = testRemote(getgenv().SelectedRemote)
                if testResult then
                    OrionLib:MakeNotification({
                        Name = "Remote Test", 
                        Content = "Remote berhasil di-test!", 
                        Time = 3
                    })
                else
                    OrionLib:MakeNotification({
                        Name = "Remote Test", 
                        Content = "Remote gagal di-test, coba remote lain", 
                        Time = 3
                    })
                end
            end
        end
    })
    
    -- Auto select first remote
    if #detected > 0 then
        getgenv().SelectedRemote = detected[1]
        print("[DEBUG] Auto-selected remote:", getgenv().SelectedRemote:GetFullName())
    end
    
    Toggle = main:AddToggle({
        Name = "Auto Mancing",
        Default = false,
        Callback = function(val)
            getgenv().AutoMancing = val
            print("[DEBUG] AutoMancing set to", val)
            
            if val and not getgenv().SelectedRemote then
                OrionLib:MakeNotification({
                    Name = "Error", 
                    Content = "Pilih remote terlebih dahulu!", 
                    Time = 3
                })
                getgenv().AutoMancing = false
                Toggle:Set(false)
                return
            end
            
            if val then
                OrionLib:MakeNotification({
                    Name = "AutoMancing", 
                    Content = "Started (Debug Mode)", 
                    Time = 2
                })
            else
                OrionLib:MakeNotification({
                    Name = "AutoMancing", 
                    Content = "Stopped", 
                    Time = 2
                })
            end
        end
    })
    
    main:AddSlider({
        Name = "Delay (seconds)", 
        Min = 0.5, 
        Max = 10, 
        Default = 1, 
        Increment = 0.1, 
        ValueName = "seconds",
        Callback = function(v) 
            getgenv().Delay = v 
            print("[DEBUG] Delay set to", v, "seconds")
        end
    })
    
    -- Test button
    main:AddButton({
        Name = "Test Selected Remote",
        Callback = function()
            if getgenv().SelectedRemote then
                testRemote(getgenv().SelectedRemote)
            else
                OrionLib:MakeNotification({
                    Name = "Error", 
                    Content = "Tidak ada remote yang dipilih!", 
                    Time = 3
                })
            end
        end
    })
    
    OrionLib:Init()
    
else
    -- Basic fallback GUI
    print("[DEBUG] Orion tidak tersedia â€” membuat fallback GUI...")
    
    local Players = game:GetService("Players")
    local localPlayer = Players.LocalPlayer
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "AutoMancingFallbackGUI_" .. tostring(math.random(1000,9999))
    screenGui.ResetOnSpawn = false
    
    if localPlayer:FindFirstChild("PlayerGui") then
        screenGui.Parent = localPlayer.PlayerGui
    else
        screenGui.Parent = localPlayer:WaitForChild("PlayerGui")
    end
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 300, 0, 200)
    frame.Position = UDim2.new(0.01, 0, 0.2, 0)
    frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    
    local title = Instance.new("TextLabel")
    title.Text = "Auto Mancing (Debug Mode)"
    title.Size = UDim2.new(1, 0, 0, 30)
    title.Position = UDim2.new(0, 0, 0, 0)
    title.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
    title.TextColor3 = Color3.fromRGB(255, 255, 255)
    title.Font = Enum.Font.GothamBold
    title.TextSize = 14
    title.Parent = frame
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 8)
    titleCorner.Parent = title
    
    local toggleBtn = Instance.new("TextButton")
    toggleBtn.Text = "Start Auto Mancing"
    toggleBtn.Size = UDim2.new(0.9, 0, 0, 40)
    toggleBtn.Position = UDim2.new(0.05, 0, 0.3, 0)
    toggleBtn.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    toggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    toggleBtn.Font = Enum.Font.Gotham
    toggleBtn.TextSize = 12
    toggleBtn.Parent = frame
    
    local toggleCorner = Instance.new("UICorner")
    toggleCorner.CornerRadius = UDim.new(0, 6)
    toggleCorner.Parent = toggleBtn
    
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Text = "Status: Stopped"
    statusLabel.Size = UDim2.new(0.9, 0, 0, 20)
    statusLabel.Position = UDim2.new(0.05, 0, 0.6, 0)
    statusLabel.BackgroundTransparency = 1
    statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextSize = 12
    statusLabel.Parent = frame
    
    toggleBtn.MouseButton1Click:Connect(function()
        getgenv().AutoMancing = not getgenv().AutoMancing
        
        if getgenv().AutoMancing then
            if #detected == 0 then
                getgenv().AutoMancing = false
                statusLabel.Text = "Status: No remotes found!"
                statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
                return
            end
            
            if not getgenv().SelectedRemote then
                getgenv().SelectedRemote = detected[1]
            end
            
            toggleBtn.Text = "Stop Auto Mancing"
            statusLabel.Text = "Status: Running..."
            statusLabel.TextColor3 = Color3.fromRGB(100, 255, 100)
            print("[DEBUG] AutoMancing started")
        else
            toggleBtn.Text = "Start Auto Mancing"
            statusLabel.Text = "Status: Stopped"
            statusLabel.TextColor3 = Color3.fromRGB(255, 100, 100)
            print("[DEBUG] AutoMancing stopped")
        end
    end)
    
    print("[DEBUG] Fallback GUI created successfully")
end

-- Enhanced auto-fishing loop dengan error handling
task.spawn(function()
    local consecutiveErrors = 0
    local maxErrors = 5
    
    while true do
        if getgenv().AutoMancing and getgenv().SelectedRemote then
            local success, errorMsg = pcall(function()
                -- Cast fishing
                local castSuccess = pcall(function()
                    if getgenv().SelectedRemote:IsA("RemoteEvent") then
                        getgenv().SelectedRemote:FireServer("Cast")
                    else
                        getgenv().SelectedRemote:InvokeServer("Cast")
                    end
                end)
                
                if castSuccess then
                    print("[DEBUG] Cast successful")
                else
                    print("[DEBUG] Cast failed, trying alternative...")
                    -- Coba alternatif
                    pcall(function()
                        if getgenv().SelectedRemote:IsA("RemoteEvent") then
                            getgenv().SelectedRemote:FireServer("Fishing")
                        else
                            getgenv().SelectedRemote:InvokeServer("Fishing")
                        end
                    end)
                end
                
                -- Tunggu delay
                local waitTime = getgenv().Delay or 1
                for i = 1, waitTime * 2 do
                    if not getgenv().AutoMancing then break end
                    task.wait(0.5)
                end
                
                -- Reel fishing
                local reelSuccess = pcall(function()
                    if getgenv().SelectedRemote:IsA("RemoteEvent") then
                        getgenv().SelectedRemote:FireServer("Reel")
                    else
                        getgenv().SelectedRemote:InvokeServer("Reel")
                    end
                end)
                
                if reelSuccess then
                    print("[DEBUG] Reel successful")
                    consecutiveErrors = 0
                else
                    print("[DEBUG] Reel failed, trying alternative...")
                    -- Coba alternatif
                    pcall(function()
                        if getgenv().SelectedRemote:IsA("RemoteEvent") then
                            getgenv().SelectedRemote:FireServer("Catch")
                        else
                            getgenv().SelectedRemote:InvokeServer("Catch")
                        end
                    end)
                    consecutiveErrors = consecutiveErrors + 1
                end
                
                -- Jika terlalu banyak error, stop otomatis
                if consecutiveErrors >= maxErrors then
                    print("[DEBUG] Too many consecutive errors, stopping auto fishing")
                    getgenv().AutoMancing = false
                    if OrionLib and Toggle then
                        Toggle:Set(false)
                    end
                    consecutiveErrors = 0
                end
                
            end)
            
            if not success then
                print("[DEBUG] Error in fishing loop:", errorMsg)
                consecutiveErrors = consecutiveErrors + 1
            end
            
        elseif getgenv().AutoMancing and not getgenv().SelectedRemote then
            print("[DEBUG] AutoMancing enabled but no remote selected")
            getgenv().AutoMancing = false
            if OrionLib and Toggle then
                Toggle:Set(false)
            end
        end
        
        task.wait(0.1)
    end
end)

print("[DEBUG] =========================================")
print("[DEBUG] Indo Hangout Auto Fishing v2 Loaded!")
print("[DEBUG] Instructions:")
print("[DEBUG] 1. Check console for detected remotes")
print("[DEBUG] 2. Select appropriate remote in GUI")
print("[DEBUG] 3. Test remote first")
print("[DEBUG] 4. Start auto fishing")
print("[DEBUG] =========================================")
